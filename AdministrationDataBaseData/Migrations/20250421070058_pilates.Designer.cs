// <auto-generated />
using System;
using AdministrationDataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdministrationDataBaseData.Migrations
{
    [DbContext(typeof(BDContext))]
    [Migration("20250421070058_pilates")]
    partial class pilates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("AdministrationDataBaseData.Models.Massage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdMassagesCustomer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MassageDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OtherObservations")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdMassagesCustomer");

                    b.ToTable("Massages");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.MassagesCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DNI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Operations")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherObservations")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhysicalActivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pregnancies")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surnames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Work")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MassagesCustomers");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.MassagesCustomerPathology", b =>
                {
                    b.Property<int>("MassagesCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PathologyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MassagesCustomerId", "PathologyId");

                    b.HasIndex("PathologyId");

                    b.ToTable("MassagesCustomerPathologies");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("MassagesCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PathologyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MassagesCustomerId");

                    b.HasIndex("PathologyId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Pathology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pathologies");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.PilatesCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DNI")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiseaseInjuryPathologyObservations")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IllnessInjuryPathology")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherObservations")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surnames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PilatesCustomers");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.PilatesCustomerObjective", b =>
                {
                    b.Property<int>("PilatesCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PilatesCustomerId", "ObjectiveId");

                    b.HasIndex("ObjectiveId");

                    b.ToTable("PilatesCustomerObjectives");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PilatesCustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionObservations")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PilatesCustomerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("HashDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Massage", b =>
                {
                    b.HasOne("AdministrationDataBaseData.Models.MassagesCustomer", "MassagesCustomer")
                        .WithMany("Massages")
                        .HasForeignKey("IdMassagesCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MassagesCustomer");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.MassagesCustomerPathology", b =>
                {
                    b.HasOne("AdministrationDataBaseData.Models.MassagesCustomer", "MassagesCustomer")
                        .WithMany("MassagesCustomerPathologies")
                        .HasForeignKey("MassagesCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdministrationDataBaseData.Models.Pathology", "Pathology")
                        .WithMany("MassagesCustomerPathologies")
                        .HasForeignKey("PathologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MassagesCustomer");

                    b.Navigation("Pathology");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Observation", b =>
                {
                    b.HasOne("AdministrationDataBaseData.Models.MassagesCustomer", "MassagesCustomer")
                        .WithMany("Observations")
                        .HasForeignKey("MassagesCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdministrationDataBaseData.Models.Pathology", "Pathology")
                        .WithMany("Observations")
                        .HasForeignKey("PathologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MassagesCustomer");

                    b.Navigation("Pathology");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.PilatesCustomerObjective", b =>
                {
                    b.HasOne("AdministrationDataBaseData.Models.Objective", "Objective")
                        .WithMany("PilatesCustomerObjectives")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdministrationDataBaseData.Models.PilatesCustomer", "PilatesCustomer")
                        .WithMany("PilatesCustomerObjectives")
                        .HasForeignKey("PilatesCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("PilatesCustomer");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Session", b =>
                {
                    b.HasOne("AdministrationDataBaseData.Models.PilatesCustomer", "PilatesCustomer")
                        .WithMany("Sessions")
                        .HasForeignKey("PilatesCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PilatesCustomer");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.MassagesCustomer", b =>
                {
                    b.Navigation("Massages");

                    b.Navigation("MassagesCustomerPathologies");

                    b.Navigation("Observations");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Objective", b =>
                {
                    b.Navigation("PilatesCustomerObjectives");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.Pathology", b =>
                {
                    b.Navigation("MassagesCustomerPathologies");

                    b.Navigation("Observations");
                });

            modelBuilder.Entity("AdministrationDataBaseData.Models.PilatesCustomer", b =>
                {
                    b.Navigation("PilatesCustomerObjectives");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
